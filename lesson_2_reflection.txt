1)What happens when you initialize a repository? Why do you need to do it?

git init creates the repository for you to use. it creates a hidden folder, .git.
.Git stores all of the repository data
The only thing necessary to create a repository is to change directory to the folder you want to create it in and enter git init

2) How is the staging area different from the working directory and the repository?
    What value do you think it offers?

    The staging area allows you to select certain files to add to the repository.
    This way you don't have to commit all your files or only 1 at a time

3) How can you use the staging area to make sure you have one commit per logical change?

	It allows you to select which files are updated, so even if you change multiple 	logical changes, you can select only the relevant ones to update for each commit.

4) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches can be used anytime you want to try something new, and aren’t sure you want to keep the changes. It also helps you work on several different changes at 	once.

5) How do the diagrams help you visualize the branch structure?

	Its a pretty accurate representation, and makes it easier to track back through the Commits

6) What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	Merging 2 branches traces the 2 branches back to their shared parent, and creates a new commit combining the changes from both branches. It branches off originally but is brought back into the main branch

7) What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

	Automatic Merging is a huge time saver, and lets you know if their are conflicts that need to be addressed. It does risk mangling some code though, because nothing is perfect. Manual merges would take much longer, and have no guarantee of being perfect. The plus side is you have full control and can see the full picture.